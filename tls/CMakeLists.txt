MESSAGE("ENTERED VORTEX TLS DIRECTORY")

set (VORTEX_TLS_SOURCES vortex-digest-tool.c
                        vortex_tls.c)

set (VORTEX_TLS_HEADERS vortex-tls.dtd.h
                        vortex_tls.h)

source_group("Headerfiles" FILES ${VORTEX_TLS_SOURCES})
source_group("Sourcefiles" FILES ${VORTEX_TLS_HEADERS})


#######################################################
## LINUX 64 bit
#######################################################

if (${VORTEX_TARGET_PLATFORM} STREQUAL linux_x86-64)
  
  set(COMPILE_ARGS     -Wall -Werror -g -O2 -Wstrict-prototypes -fstack-protector-all -Wstack-protector -pthread -fPIC)
  set(PREPROCESSOR_DEF -DHAVE_CONFIG_H -DVERSION=\"${VORTEXVER}\" -DPACKAGE_TOP_DIR=\"..\" -D__COMPILING_VORTEX__ )
  set(CMAKE_SHARED_LINKER_FLAGS -O2)
  set(VORTEX_LOCAL_TLS vortex-tls-1.1)
  set(VORTEX_LOCAL_TLS_STATIC vortex-tls-1.1_static)
  set(VORTEX_LIB_NAME_TLS ${VORTEX_LOCAL_TLS} PARENT_SCOPE)
  set(BUILD_STATIC false)

  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/static)

  set(LIBAXL libaxl.so)
  set(LIBSSL libssl.so)
  set(LIBCRYPTO libcrypto.so)
  set(LIBVORTEX libvortex-1.1.so)



  MESSAGE (STATUS "CMAKE PROJECT_SOURCE_DIR    ${CMAKE_CURRENT_SOURCE_DIR}")
  MESSAGE (STATUS "CMAKE_BINARY_DIR:           ${CMAKE_BINARY_DIR}" )
  MESSAGE (STATUS "LIBRARY_OUTPUT_DIRECTORY:   ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}")

endif (${VORTEX_TARGET_PLATFORM} STREQUAL linux_x86-64)

#######################################################

INCLUDE_DIRECTORIES (.)
INCLUDE_DIRECTORIES (..)
INCLUDE_DIRECTORIES (../src)
INCLUDE_DIRECTORIES (../../libaxl/src)

ADD_DEFINITIONS (${COMPILE_ARGS} ${PREPROCESSOR_DEF})

ADD_LIBRARY( ${VORTEX_LOCAL_TLS}         SHARED ${VORTEX_TLS_HEADERS} ${VORTEX_TLS_SOURCES})
TARGET_LINK_LIBRARIES( ${VORTEX_LOCAL_TLS}         ${LIBAXL} ${LIBVORTEX} ${CMAKE_THREAD_LIBS_INIT} ${LIBSSL} ${LIBCRYPTO} )

if (${BUILD_STATIC} STREQUAL true)
  ADD_LIBRARY( ${VORTEX_LOCAL_TLS_STATIC} STATIC ${VORTEX_TLS_HEADERS} ${VORTEX_TLS_SOURCES})
  TARGET_LINK_LIBRARIES( ${VORTEX_LOCAL_TLS_STATIC}  ${LIBAXL} ${LIBVORTEX} ${CMAKE_THREAD_LIBS_INIT} ${LIBSSL}${LIBCRYPTO} )
  set_target_properties(${VORTEX_LOCAL_TLS_STATIC}  PROPERTIES OUTPUT_NAME ${VORTEX_LOCAL_TLS})
endif (${BUILD_STATIC} STREQUAL true)

INSTALL (TARGETS ${VORTEX_LOCAL_TLS}       DESTINATION ${CMAKE_BINARY_DIR}/build/lib)
if (${BUILD_STATIC} STREQUAL true)
  INSTALL (TARGETS ${VORTEX_LOCAL_TLS_STATIC} DESTINATION ${CMAKE_BINARY_DIR}/build/static)
endif (${BUILD_STATIC} STREQUAL true)

